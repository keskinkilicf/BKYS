import streamlit as st
from datetime import datetime
import pandas as pd
import google.generativeai as genai

# API AnahtarÄ±
GEMINI_ANAHTARI = "AIzaSyD1e1jL3tJ8tyihXLNtbWLFSf-xOJ8Nc_w"

# Gemini API'yi yapÄ±landÄ±rma
genai.configure(api_key=GEMINI_ANAHTARI)
model = genai.GenerativeModel('gemini-1.5-flash')

def get_activity_recommendations(unit, activity_name, description, date):
    prompt = f"""
    Kalite yÃ¶netim sistemine yÃ¶nelik faaliyet planlamasÄ± ve kanÄ±t oluÅŸturma konusunda bir uzman gibi davran ve aÅŸaÄŸÄ±daki bilgilere gÃ¶re Ã¶nerilerde bulun:
    Birim: {unit}
    Faaliyet AdÄ±: {activity_name}
    AÃ§Ä±klama: {description}
    Tarih: {date}

    LÃ¼tfen ÅŸunlarÄ± saÄŸla:
    1. Faaliyetin iyileÅŸtirilmesi iÃ§in Ã¶neriler
    2. Faaliyetle ilgili olasÄ± riskler ve Ã¶nlemler
    3. Gerekli kaynaklar ve verimlilik artÄ±rÄ±cÄ± Ã¶neriler
    """
    response = model.generate_content(prompt)
    return response.text

# BaÅŸlÄ±k ve tanÄ±tÄ±m
st.title("BKYS")
st.title("ğŸ“‹ BÃ¼tÃ¼nleÅŸik Kalite YÃ¶netim Sistemi KanÄ±t GiriÅŸ Formu")
st.write("Bu form, kalite yÃ¶netim sistemi gerÃ§ekleÅŸtirme kanÄ±tlarÄ±nÄ± kayÄ±t altÄ±na almanÄ±zÄ± saÄŸlar.")

# Form alanlarÄ±
st.subheader("Birim Bilgileri")

birim = st.text_input("Birim AdÄ±", placeholder="Ã–rneÄŸin: Uzaktan EÄŸitim AraÅŸtÄ±rma ve Uygulama Merkezi")
alt_birim = st.text_input("Alt Birim", placeholder="Alt birimi belirtiniz (isteÄŸe baÄŸlÄ±)")

donem = st.text_input("DÃ¶nem", placeholder="Ã–rneÄŸin: 2024 Yaz")

gerceklesme_tarihi = st.date_input("GerÃ§ekleÅŸme Tarihi", value=datetime.now())

st.subheader("Faaliyet Bilgileri")

faaliyet_adi = st.text_area("GerÃ§ekleÅŸtirilen Faaliyet AdÄ±", placeholder="Faaliyetin adÄ±nÄ± yazÄ±nÄ±z")

gerceklesmeyen_gerekce = st.text_area("GerÃ§ekleÅŸtirilemeyen Faaliyetler Ä°Ã§in GerekÃ§e", placeholder="EÄŸer bir faaliyet gerÃ§ekleÅŸtirilemediyse, gerekÃ§esini yazÄ±nÄ±z (isteÄŸe baÄŸlÄ±)")

faaliyet_aciklama = st.text_area("Faaliyet GerÃ§ekleÅŸtirme AÃ§Ä±klamasÄ±", placeholder="Faaliyetin gerÃ§ekleÅŸtirilme sÃ¼recini aÃ§Ä±klayÄ±nÄ±z")

faaliyet_kanit_gorseli = st.file_uploader("Faaliyet GerÃ§ekleÅŸtirme KanÄ±t GÃ¶rseli", type=["jpg", "jpeg", "png", "pdf"])

deÄŸerlendirme = st.text_area("DeÄŸerlendirme", placeholder="Faaliyetle ilgili deÄŸerlendirme aÃ§Ä±klamasÄ±")

# Ã–neri butonu
if st.button("Yapay Zeka Ã–nerilerini Al"):
    if birim and faaliyet_adi and faaliyet_aciklama:
        with st.spinner("Ã–neriler oluÅŸturuluyor..."):
            Ã¶neriler = get_activity_recommendations(birim, faaliyet_adi, faaliyet_aciklama, gerceklesme_tarihi.strftime("%Y-%m-%d"))
            st.markdown(Ã¶neriler)
    else:
        st.warning("LÃ¼tfen birim, faaliyet adÄ± ve aÃ§Ä±klama alanlarÄ±nÄ± doldurun!")

# Kaydetme butonu
if st.button("Kaydet"):
    if birim and donem and gerceklesme_tarihi and faaliyet_adi and faaliyet_aciklama and deÄŸerlendirme:
        # Verileri bir tabloya kaydetme
        data = {
            "Birim": [birim],
            "Alt Birim": [alt_birim],
            "DÃ¶nem": [donem],
            "GerÃ§ekleÅŸme Tarihi": [gerceklesme_tarihi.strftime("%Y-%m-%d")],
            "GerÃ§ekleÅŸtirilen Faaliyet AdÄ±": [faaliyet_adi],
            "GerÃ§ekleÅŸtirilemeyen GerekÃ§e": [gerceklesmeyen_gerekce],
            "Faaliyet AÃ§Ä±klamasÄ±": [faaliyet_aciklama],
            "DeÄŸerlendirme": [deÄŸerlendirme],
            "KanÄ±t GÃ¶rseli": [faaliyet_kanit_gorseli.name if faaliyet_kanit_gorseli else "Yok"]
        }
        df = pd.DataFrame(data)

        # CSV'ye kaydetme
        try:
            df.to_csv("kanit_girisleri.csv", mode='a', header=False, index=False)
            st.success("KanÄ±t baÅŸarÄ±yla kaydedildi!")
        except Exception as e:
            st.error(f"Kaydetme sÄ±rasÄ±nda bir hata oluÅŸtu: {e}")
    else:
        st.warning("LÃ¼tfen tÃ¼m zorunlu alanlarÄ± doldurun!")
